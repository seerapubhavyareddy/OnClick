// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?     // Add this field for Google OAuth

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  automations   Automation[]
  socialPosts   SocialPost[]
  settings      UserSettings?
  googleCalendarAccounts GoogleCalendarAccount[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id                String    @id @default(cuid())
  userId            String
  calendarEventId   String
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime?
  attendees         Json?     // Array of attendee objects
  meetingUrl        String?
  platform          String?   // zoom, teams, meet, etc
  
  // Recall.ai bot fields
  recallBotId       String?
  recallBotStatus   String?   // scheduled, joining, in_call, done, failed, etc
  pollRetries       Int       @default(0)
  lastPolledAt      DateTime?
  
  // Transcript fields
  transcript        Json?     // Raw transcript from Recall.ai
  transcriptText    String?   // Formatted transcript text
  videoUrl          String?
  
  // Status fields
  noteTakerEnabled  Boolean   @default(false)
  completedAt       DateTime?
  lastError         String?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialPosts       SocialPost[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, calendarEventId])
}

model Automation {
  id            String    @id @default(cuid())
  userId        String
  name          String
  type          String    // 'generate_post', 'send_email', etc
  platform      String    // 'linkedin', 'facebook', 'twitter', 'email'
  description   String?
  prompt        String?   // Custom prompt for AI generation
  enabled       Boolean   @default(true)
  
  // Settings specific to automation type
  settings      Json?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialPosts   SocialPost[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SocialPost {
  id            String    @id @default(cuid())
  meetingId     String
  automationId  String
  userId        String    // Denormalized for easy querying
  
  platform      String    // linkedin, facebook, twitter
  content       String    @db.Text
  hashtags      String[]  @default([])
  
  status        String    @default("draft") // draft, posted, failed
  
  // Social media post IDs (when posted)
  platformPostId String?
  platformUrl    String?
  
  // Scheduling
  scheduledAt   DateTime?
  postedAt      DateTime?
  
  // Error handling
  lastError     String?
  retryCount    Int       @default(0)
  
  // Relations
  meeting       Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  
  // Bot timing settings
  botJoinMinutesBefore  Int     @default(5)
  
  // Social media connections
  linkedinConnected     Boolean @default(false)
  linkedinAccessToken   String? @db.Text
  linkedinRefreshToken  String? @db.Text
  linkedinExpiresAt     DateTime?
  
  facebookConnected     Boolean @default(false)
  facebookAccessToken   String? @db.Text
  facebookPageId        String?
  
  twitterConnected      Boolean @default(false)
  twitterAccessToken    String? @db.Text
  twitterRefreshToken   String? @db.Text
  
  // AI settings
  aiProvider            String  @default("claude") // claude, openai, etc
  
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model GoogleCalendarAccount {
  id                String  @id @default(cuid())
  userId            String
  email             String
  accessToken       String  @db.Text
  refreshToken      String? @db.Text
  expiresAt         DateTime?
  calendarId        String  @default("primary")
  
  // Display info
  displayName       String?
  isPrimary         Boolean @default(false)
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, email])
}