// prisma/schema.prisma - Clean version
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  automations   Automation[]
  socialPosts   SocialPost[]
  settings      UserSettings?
  socialAccounts SocialAccount[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id                String    @id @default(cuid())
  userId            String
  calendarEventId   String
  title             String
  description       String?
  startTime         DateTime
  endTime           DateTime?
  attendees         Json?
  meetingUrl        String?
  platform          String?
  
  // Recall.ai bot fields
  recallBotId       String?
  recallBotStatus   String?
  pollRetries       Int       @default(0)
  lastPolledAt      DateTime?
  
  // Transcript fields
  transcript        Json?
  transcriptText    String?
  videoUrl          String?
  
  // Status fields
  noteTakerEnabled  Boolean   @default(false)
  completedAt       DateTime?
  lastError         String?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialPosts       SocialPost[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, calendarEventId])
}

model Automation {
  id            String    @id @default(cuid())
  userId        String
  name          String
  type          String
  platform      String
  description   String?
  prompt        String?
  enabled       Boolean   @default(true)
  settings      Json?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialPosts   SocialPost[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SocialPost {
  id            String    @id @default(cuid())
  meetingId     String
  automationId  String
  userId        String
  
  platform      String
  content       String    @db.Text
  hashtags      String[]  @default([])
  status        String    @default("draft")
  
  platformPostId String?
  platformUrl    String?
  scheduledAt   DateTime?
  postedAt      DateTime?
  lastError     String?
  retryCount    Int       @default(0)
  
  meeting       Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// SIMPLIFIED UserSettings - removed duplicate social media fields
model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  botJoinMinutesBefore  Int     @default(5)
  aiProvider            String  @default("claude")
  
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// MAIN social account storage - replaces UserSettings social fields
model SocialAccount {
  id           String    @id @default(cuid())
  userId       String
  platform     String    // 'linkedin' or 'facebook'
  platformId   String    // Platform-specific user ID
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  scope        String?
  profileData  Json?     // Store profile info (name, profile_url, etc.)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([userId, platform])
}